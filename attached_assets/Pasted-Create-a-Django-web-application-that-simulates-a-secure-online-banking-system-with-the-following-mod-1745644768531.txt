Create a Django web application that simulates a secure online banking system with the following modules:

1. **Custom User Authentication**:
   - Use email as the unique identifier.
   - Implement registration, login, logout, and email-based verification.
   - Use Django’s `AbstractBaseUser` and `PermissionsMixin`.

2. **Account Management**:
   - When a user registers, automatically create a linked bank account.
   - Each account has a unique 12-digit account number, balance, and PIN (hashed).
   - Admin can freeze or delete accounts from the admin panel.

3. **KYC (Know Your Customer) Verification**:
   - Allow users to upload identity documents (PDF, PNG, JPEG).
   - Store KYC documents securely (locally for now, simulate S3).
   - Admin dashboard to review and approve/reject KYC.
   - Show KYC status on user dashboard.

4. **Fund Transfer Module**:
   - Users can transfer money to another user by entering the recipient’s account number.
   - Use `transaction.atomic()` and `select_for_update()` to ensure atomic fund transfers.
   - Prevent overdrafts, self-transfer, and invalid inputs.
   - Store all transactions with sender, receiver, amount, timestamp, and unique reference.

5. **Card Management**:
   - Users can create virtual debit or credit cards.
   - Cards have card numbers, expiry dates, wallet balances, and CVV (hashed).
   - Users can fund cards from their account and withdraw back.
   - Users can deactivate or delete cards.

6. **Dashboard**:
   - User dashboard shows account info, balance, recent transactions, KYC status, and cards.
   - Admin dashboard shows pending KYC submissions, user info, and system logs.

7. **Security and Middleware**:
   - Include CSRF protection, hashed passwords, session timeout middleware.
   - Input validation on all forms (transfer amount must be positive, file type validation, etc.).

8. **Admin Panel**:
   - Customize Django admin to manage Users, Accounts, KYCRecords, Transactions, and Cards.

9. **Testing and Logging**:
   - Write unit tests for transaction and account logic.
   - Add logging for errors and critical events.

10. **Environment**:
    - Use Django 4.x, Python 3.x, SQLite for development.
    - Set up static and media files with appropriate URL paths.

Project should be modularized using Django apps:
- `users` (custom user model)
- `accounts` (account creation)
- `kyc` (KYC document handling)
- `transactions` (fund transfer)
- `cards` (card features)
- `dashboard` (UI for users/admin)

Use Bootstrap for the frontend. Keep the UI responsive and minimal. Prioritize security, modularity, and clarity.
